/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as LoginImport } from './routes/login'
import { Route as DashboardImport } from './routes/dashboard'
import { Route as ClassesImport } from './routes/classes'
import { Route as IndexImport } from './routes/index'
import { Route as ClassesClassSlugImport } from './routes/classes/$classSlug'

// Create/Update Routes

const LoginRoute = LoginImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRoute,
} as any)

const DashboardRoute = DashboardImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => rootRoute,
} as any)

const ClassesRoute = ClassesImport.update({
  id: '/classes',
  path: '/classes',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const ClassesClassSlugRoute = ClassesClassSlugImport.update({
  id: '/$classSlug',
  path: '/$classSlug',
  getParentRoute: () => ClassesRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/classes': {
      id: '/classes'
      path: '/classes'
      fullPath: '/classes'
      preLoaderRoute: typeof ClassesImport
      parentRoute: typeof rootRoute
    }
    '/dashboard': {
      id: '/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof DashboardImport
      parentRoute: typeof rootRoute
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginImport
      parentRoute: typeof rootRoute
    }
    '/classes/$classSlug': {
      id: '/classes/$classSlug'
      path: '/$classSlug'
      fullPath: '/classes/$classSlug'
      preLoaderRoute: typeof ClassesClassSlugImport
      parentRoute: typeof ClassesImport
    }
  }
}

// Create and export the route tree

interface ClassesRouteChildren {
  ClassesClassSlugRoute: typeof ClassesClassSlugRoute
}

const ClassesRouteChildren: ClassesRouteChildren = {
  ClassesClassSlugRoute: ClassesClassSlugRoute,
}

const ClassesRouteWithChildren =
  ClassesRoute._addFileChildren(ClassesRouteChildren)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/classes': typeof ClassesRouteWithChildren
  '/dashboard': typeof DashboardRoute
  '/login': typeof LoginRoute
  '/classes/$classSlug': typeof ClassesClassSlugRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/classes': typeof ClassesRouteWithChildren
  '/dashboard': typeof DashboardRoute
  '/login': typeof LoginRoute
  '/classes/$classSlug': typeof ClassesClassSlugRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/classes': typeof ClassesRouteWithChildren
  '/dashboard': typeof DashboardRoute
  '/login': typeof LoginRoute
  '/classes/$classSlug': typeof ClassesClassSlugRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/classes' | '/dashboard' | '/login' | '/classes/$classSlug'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/classes' | '/dashboard' | '/login' | '/classes/$classSlug'
  id:
    | '__root__'
    | '/'
    | '/classes'
    | '/dashboard'
    | '/login'
    | '/classes/$classSlug'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  ClassesRoute: typeof ClassesRouteWithChildren
  DashboardRoute: typeof DashboardRoute
  LoginRoute: typeof LoginRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  ClassesRoute: ClassesRouteWithChildren,
  DashboardRoute: DashboardRoute,
  LoginRoute: LoginRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/classes",
        "/dashboard",
        "/login"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/classes": {
      "filePath": "classes.tsx",
      "children": [
        "/classes/$classSlug"
      ]
    },
    "/dashboard": {
      "filePath": "dashboard.tsx"
    },
    "/login": {
      "filePath": "login.tsx"
    },
    "/classes/$classSlug": {
      "filePath": "classes/$classSlug.tsx",
      "parent": "/classes"
    }
  }
}
ROUTE_MANIFEST_END */
